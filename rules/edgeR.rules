rule merge_counts:
    conda:
        "../envs/edger.yml"
    input:
        htseq_files = expand("samples/{sample}/rnaseq/htseq/counts.txt", sample=read_naming.keys()),
        reference_gff = "reference/reference_genome.gff",
    output:
        "report/rnaseq/edger/count_table.tsv",
        "report/rnaseq/edger/cor_plot.pdf",
        "report/rnaseq/edger/counts_distribution.pdf"
    script: "scripts/merge_counts.R"


rule rpkm_table:
    conda:
        "../envs/edger.yml"
    input:
        count_file = "report/rnaseq/edger/count_table.tsv",
        reference_gff = "reference/reference_genome.gff",
    params:
        sample_table = config["local_samples"],
        annotation = "annotations/merged_annotation.tab",
    output:
        "report/rnaseq/edger/rpkm_table.tsv",
    script: "scripts/rpkm.R"


if config["replicates"]:
    print("------ replicates ------")

    rule edger_analysis:
        conda:
            "../envs/edger.yml"
        input:
            count_file = "report/rnaseq/edger/count_table.tsv",
            reference_gff = "reference/reference_genome.gff",
        params:
            sample_table = config["local_samples"],
            annotation = "annotations/merged_annotation.tab",
            FDR_cutoff =  lambda wildcards: wildcards.FDR,
            logFC_cutoff =  lambda wildcards: wildcards.logFC,
            cond1 =  lambda wildcards: wildcards.condition_1,
            cond2 =  lambda wildcards: wildcards.condition_2 ,
        output:
            # report/rnaseq/edger/24h_vs_BPDL/FDR01_logFC2/24h_vs_BPDL_counts.tsv
            "report/rnaseq/edger/{condition_1}_vs_{condition_2}/FDR{FDR}_logFC{logFC}/{condition_1}_vs_{condition_2}_plotMDS.pdf",
            "report/rnaseq/edger/{condition_1}_vs_{condition_2}/FDR{FDR}_logFC{logFC}/{condition_1}_vs_{condition_2}_volcano.pdf",
            "report/rnaseq/edger/{condition_1}_vs_{condition_2}/FDR{FDR}_logFC{logFC}/{condition_1}_vs_{condition_2}_plotSmear.pdf",
            "report/rnaseq/edger/{condition_1}_vs_{condition_2}/FDR{FDR}_logFC{logFC}/{condition_1}_vs_{condition_2}_heatmap_top_100.svg",
            "report/rnaseq/edger/{condition_1}_vs_{condition_2}/FDR{FDR}_logFC{logFC}/{condition_1}_vs_{condition_2}_counts.tsv",
            "report/rnaseq/edger/{condition_1}_vs_{condition_2}/FDR{FDR}_logFC{logFC}/{condition_1}_vs_{condition_2}_heatmap_top_100_down.svg",
            "report/rnaseq/edger/{condition_1}_vs_{condition_2}/FDR{FDR}_logFC{logFC}/{condition_1}_vs_{condition_2}_heatmap_top_100_up.svg",
            "report/rnaseq/edger/{condition_1}_vs_{condition_2}/FDR{FDR}_logFC{logFC}/{condition_1}_vs_{condition_2}_downregulated_locus_list.tsv",
            "report/rnaseq/edger/{condition_1}_vs_{condition_2}/FDR{FDR}_logFC{logFC}/{condition_1}_vs_{condition_2}_upregulated_locus_list.tsv",
        script: "scripts/edger_analysis.R"

else:
    print("------ no replicates ------")
    rule edger_analysis_no_replicates:
        conda:
            "../envs/edger.yml"
        input:
            count_file = "report/rnaseq/edger/count_table.tsv",
            reference_gff = "reference/reference_genome.gff",
        params:
            sample_table = config["local_samples"],
            annotation = "annotations/merged_annotation.tab",
        output:
            "report/rnaseq/edger/{condition_1}_vs_{condition_2}/{condition_1}_vs_{condition_2}_plotMDS.pdf",
            "report/rnaseq/edger/{condition_1}_vs_{condition_2}/{condition_1}_vs_{condition_2}_plotSmear.pdf",
            "report/rnaseq/edger/{condition_1}_vs_{condition_2}/{condition_1}_vs_{condition_2}_counts.tsv",
            "report/rnaseq/edger/{condition_1}_vs_{condition_2}/{condition_1}_vs_{condition_2}_heatmap_top_100.pdf",
            "report/rnaseq/edger/{condition_1}_vs_{condition_2}/{condition_1}_vs_{condition_2}_heatmap_top_100_down.pdf",
            "report/rnaseq/edger/{condition_1}_vs_{condition_2}/{condition_1}_vs_{condition_2}_heatmap_top_100_up.pdf",

        script: "scripts/edger_analysis_no_replicates.R"

